<?xml version="1.0" encoding="utf-8"?>
<androidx.coordinatorlayout.widget.CoordinatorLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/main_content"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!--
        顶层容器使用用 CoordinatorLayout 是前提
        AppBarLayout+Toolbar 的组合
        ImageView的出现，使父容器AppBarLayout无所适从
        CollapsingToolbarLayout 主角闪亮登场，由它接管ImageView 和Toolbar(它是FrameLayout的子类)
        指明CollapsingToolbarLayout 的‘app:layout_scrollFlags="scroll|exitUntilCollapsed"’行为，是“折叠后，完全退出”，即你将看不到我！
        指明ImageView的app:layout_collapseMode="parallax"，表明它将是折叠的部分。
        指明Toolbar的app:layout_collapseMode="pin"，表明它是固定的部分。
    -->
    <com.google.android.material.appbar.AppBarLayout
        android:id="@+id/appbar"
        android:layout_width="match_parent"
        android:layout_height="@dimen/expanded_toolbar_height"
        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">

        <com.google.android.material.appbar.CollapsingToolbarLayout
            android:id="@+id/collapsing_toolbar"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:titleEnabled="false"
            android:fitsSystemWindows="true"
            app:contentScrim="@color/colorPrimary"
            app:statusBarScrim="@android:color/transparent"
            app:layout_scrollFlags="scroll|exitUntilCollapsed|snap">

            <ImageView
                android:id="@+id/imageview"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:scaleType="centerCrop"
                android:adjustViewBounds="true"
                app:layout_collapseMode="parallax"
                app:layout_collapseParallaxMultiplier="0.7"
                android:fitsSystemWindows="true"
                android:src="@drawable/img01">
            </ImageView>

            <de.hdodenhof.circleimageview.CircleImageView
                android:id="@+id/big_headerIcon"
                android:layout_width="80dp"
                android:layout_height="80dp"
                android:src="@drawable/cutecat"/>

            <!-- 自定义 toolbar,本质也是继承于toolbar -->
            <androidx.appcompat.widget.Toolbar
                android:id="@+id/minePageToolBar"
                android:layout_width="match_parent"
                android:layout_height="50dp"
                android:minHeight="?attr/actionBarSize"
                android:background="?attr/colorPrimaryDark"
                app:layout_collapseMode="pin"
                app:popupTheme="@style/AppTheme.PopupOverlay"
                android:fitsSystemWindows="true"
                app:contentInsetLeft="0dp"
                app:contentInsetStart="0dp"
                android:visibility="gone">

                <de.hdodenhof.circleimageview.CircleImageView
                    android:id="@+id/small_headerIcon"
                    android:layout_width="40dp"
                    android:layout_height="40dp"
                    android:src="@drawable/cutecat"/>

            </androidx.appcompat.widget.Toolbar>

        </com.google.android.material.appbar.CollapsingToolbarLayout>

    </com.google.android.material.appbar.AppBarLayout>


    <!--
        NestedScrollView 即 支持嵌套滑动的 ScrollView
        NestedScrollView 与 ScrollView 一样，内部只能容纳一个子控件
        NestedScrollView 与 ScrollView 的区别就在于 NestedScrollView 支持 嵌套滑动，无论是作为父控件还是子控件，嵌套滑动都支持，且默认开启
    -->
    <androidx.core.widget.NestedScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_behavior="@string/appbar_scrolling_view_behavior">

        <include layout="@layout/content_mine"/>

    </androidx.core.widget.NestedScrollView>

</androidx.coordinatorlayout.widget.CoordinatorLayout>